#include <dos.h>
#include <conio.h>
#include <alloc.h>
#include <math.h>
#include <values.h>
#include <stdio.h>
#include <stdlib.h>
#include "patt2dat.h"
#include <signal.h>

void Catcher(int sig/*, int type, int *reglist*/)
{
   fprintf(stderr,"\nSorry ! Floating point error .signal %d."PENTER,sig);
   getch();
   exit(4);
}
/*  signal(SIGFPE, Catcher); */

/* This is a user-defined matherr function that prevents
   any error messages from being printed. */

char *whyS [] =
{
    "argument domain error",
    "argument singularity ",
    "overflow range error ",
    "underflow range error",
    "total loss of significance",
    "partial loss of significance"
};

int matherr(struct exception *e)
{
	if (e->type == UNDERFLOW)
	{
		/* flush underflow to 0 */
		fprintf(stderr,"Warning:UNDERFLOW flush to 0");
		e->retval = 0;
		return 1;
	}
	if (e->type == TLOSS || e->type == PLOSS)
	{
		/* total loss of precision, but ignore the problem */
		fprintf(stderr,"Warning:Loss of precision");
		return 1;
	}
	/* all other errors are fatal */
	fprintf (stderr,
	"MATH ERROR:%s (%8g,%8g): %s\n", e->name, e->arg1, e->arg2, whyS [e->type - 1]);
	PAUSE;
	return 0;
}


float epsilonapr=0.1;

int sort_function( const void* a, const void* b)
{
if( ((band*)a)->met == ((band*)b)->met )
	return 0;
if( ((band*)a)->met > ((band*)b)->met )
	return 1;
	else
	return -1;
}

void sortbands(band* STD,int n)
{
  qsort((void *)STD , n, sizeof( STD[0] ), sort_function);
}

void DummyGenApprox(band* ,int )
{
sound(200);
delay(100);
nosound();
}

float NullApproxymation(float X)
{ return X;}

const MIN_PAR_EXP=-708.395996 ;	/* Minimalna wartosc jeszcze nie wywracajaca Exp */
static double ln_MAXFLOAT=log(MAXFLOAT),ln10=log(10.000);
				/* czesto uzywane logarytmy	 */
static double rA=0.0,rB=0;	/* Parametry prostej regresji	 */

void StandartGenApprox(band* STD,int N)
{
#define sqr( _P_ )   ((_P_)*(_P_))
double sumaX=0,sumaY=0,sumaXkw=0,sumaXY=0;
int    ster=0;
rA=0;rB=0;
for(ster=0;ster<N;ster++)
	{
	STD[ster].kbz=log10(STD[ster].kbz);/* albo log czyli logarytm naturalny */
	}
for(ster=0;ster<N;ster++)
	{
	sumaX=sumaX+STD[ster].met;
	sumaY=sumaY+STD[ster].kbz;
	sumaXkw=sumaXkw+sqr(STD[ster].met);
	sumaXY=sumaXY+(STD[ster].met*STD[ster].kbz);
	}
rB=(sumaX*sumaXY-sumaXkw*sumaY)/(sqr(sumaX)-N*sumaXkw);
rA=((sumaY/N)-rB)/(sumaX/N);
}

float StandartApproxymation(float X)
{
double y=(rA*(X)+rB)*ln10;
if(y<MIN_PAR_EXP) return 0.0;/* Wartosc wywracajaca Exp */
if( y<ln_MAXFLOAT )
	return exp( y );
	else
	return MAXFLOAT;
}

double hA=1.0,hB=0.0,hC=0.0;/* Zmienne uzywane przez hiper Approxymacje */

void HiperGenApprox(band* STD,int N)
{
double sumaY=0;
double sumaYprzezX=0;
double suma1przezX=0;
double suma1przezX2=0;
double _1przezN=1.0/(double)N;
for(int i=0;i<N;i++)
	{
	sumaY		+=STD[i].kbz;
	sumaYprzezX	+=STD[i].kbz/STD[i].met;
	suma1przezX	+=1/STD[i].met;
	suma1przezX2	+=1/(STD[i].met*STD[i].met);
	}
hB=0;
hA=( sumaYprzezX  -  (_1przezN)*sumaY*suma1przezX )
    /
   ( suma1przezX2 - (_1przezN)*suma1przezX*suma1przezX  );
hC=(_1przezN)*(sumaY-hA*suma1przezX);
}

float HiperApproxymation(float X)
{
if(X<=hB) return 65000L;
 else return hA/(X-hB)+hC;
}

/* A P R O K S Y M A C J A   METODA   G R A M M A - S H M I T H A */
/*================================================================*/
/* 		( Przerobka programu PASCALOWEGO )
tablica=array[0..nnn] of real;
*/
typedef double*  tablica; 	/* 0..nnn */

tablica alloctab(int nnn)
{
tablica pom=(double*)calloc( nnn+1 , sizeof( double ) );
int i;
if( pom==NULL ) return NULL;
	else
	for( i=0; i<=nnn; i++) pom[i]=0.0;
return pom;
}
void freetab( tablica pom )
{
free( pom );
}
/*
tablicaW=array[0..nnn] of tablica;
*/
typedef double** tablicaW;	/* 0..nnn */

tablicaW alloctabW(int nnn)
{
int i,j;
tablicaW pom;
pom=(double**)calloc( nnn+1 , sizeof( double* ) );
if( pom==NULL ) return NULL;
for(i=0;i<=nnn;i++)
	{
	pom[i]=(double*)calloc( nnn+1 , sizeof( double ) );
	if(pom==NULL) goto DEALLOC;
	   else
	   for( j=0; j<=nnn; j++) pom[i][j]=0.0;
	}
return pom;
DEALLOC:
i--;
while(i>=0) { free(pom[i]); i--;}
free( pom );
}

void freetabW(tablicaW pom,int nnn)
{
while(nnn>=0) { free(pom[nnn]); nnn--;}
free( pom );
}
/*
tablicaF=array[-1..nnn] of tablica;
*/
typedef double** tablicaF;	/* -1..nnn */

tablicaF alloctabF(int nnn)
{
tablicaF pom=alloctabW( nnn+1 );
if(pom) return(++pom);
  else  return NULL;
}

void freetabF(tablicaF pom, int nnn)
{
pom--;
freetabW( pom , nnn+1 );
}

static
int n=0;   /* ilosc wezlow approxymcji - funkcja GramGenApprox musi nadac wartosc */
static
tablica  WX=NULL;/* Konieczne wskazniki statyczne - zawsze sensowne*/
static
tablica   T=NULL;/* pamiec przydziela i zwalnia funkcja GramGenApprox */

double HORNER(tablica A, double x)
{
int i;
double  w=0;
for( i=n; i>=0; i-- ) w=x*w+A[i];
return w;
}

void ZROB_BAZA_F(tablicaW/*&*/ F,tablicaF/*&*/ W)
{
int i;
/*wartosci wielomianow bazowych*/
#define WAR_BAZ( BAZ , k )	\
{ int il;                        \
  for( il=1;il<=n;il++ ) W[k][il]=HORNER(BAZ,WX[il]);}

for( i=0;i<=n;i++ ) F[i][i]=1.0;
for( i=0;i<=n;i++ )
		WAR_BAZ(F[i],i);

}/*ZROB BAZA F*/;


double NORMAKW(tablica/*&*/ P)
{
double nor=0;
int  i;
for( i=1;i<=n;i++ ) nor=nor+P[i]*P[i];
return nor;
}

double ILOCZ_1(int k,tablica/*&*/ P,tablicaF W)
{
double ilo=0;
int  i;

for( i=1;i<=n;i++ ) ilo=ilo+W[k][i]*P[i];

return ilo;
}

double ILOCZ_2(tablica/*&*/ P,tablica/*&*/ Q)
{
int i;
double	ilo=0;
for( i=1;i<=n;i++ )  ilo=ilo+Q[i]*P[i];
return ilo;
}

void X_RAZY_F(tablica/*&*/ FUN, tablica XF)
{
int i;
for( i=1;i<=n;i++ ) XF[i]=FUN[i]*WX[i];
}

void RAZY(tablica/*&*/ T,double a,tablica M)
{
int i;
 for( i=1;i<=n;i++) M[i]=a*T[i];
}

void DODAJ(tablica/*&*/ A,tablica/*&*/ B,tablica S)
{
int i;
for( i=1;i<=n;i++ ) S[i]=A[i]+B[i];
}

void ODEJMIJ(tablica/*&*/ A,tablica/*&*/ B,tablica R)
{
int i;
for( i=1;i<=n;i++ ) R[i]=A[i]-B[i];
}

void WSPOLCZ(tablica/*&*/ T,tablica/*&*/ H)
{
tablica P,AA;
int i,j;
P=alloctab(n);
if(P==NULL) OutOfMem(1);
AA=alloctab(n);
if(AA==NULL) OutOfMem(1);
for( i=0;i<=n;i++) P[i]=0;
for( i=0;i<=(n-1);i++ ) AA[i]=WX[i+1];
for( i=0;i<=(n-1);i++ )
	{
	P[i]=H[i+1];
	for( j=i-1;j>=0;j-- )
		P[j]=(P[j+1]-P[j])/(AA[i]-AA[j]);
	T[i+1]=P[0];
	}
freetab( P );
freetab( AA );
}

void PRZYPISZ( tablica T, tablica S)
{
int i;
for( i=0; i<=n; i++) T[i]=S[i];
}

double GramSmitApproxymation(double z)
{
double w=0;
int   i;
for( i=n; i>=1 ; i--)
	 w=w*(z-WX[i])+T[i];
return w;
}

void GramSmitGenApprox(band* STD ,int N)
/* A P R O K S Y M A C J A   METODA   G R A M M A - S H M I T H A */
/* Wlasciwa funkcja */
{
tablica WY,WH; /* WX-wezly, T-wspolczynniki wielomianu aproksymujacego - globalne*/
	       /*WY-wartosci funkcji w wezlach, */
tablica  S,R,M,XF;  /* S-suma,R-roznica,M-mnozenie przez liczbe,
				 XF-x*funkcja			*/
tablicaF W,WSP,G,MG;  /* W-wartosci wielomianow bazowych - globalne
			F-macierz  wielomianow ortonormalnych,
			MG-macierz funkcji  ortonormalnych 		*/
tablicaW  F;
tablicaF  C;

double  eps=epsilonapr,epsn,pom;
int   wym=N;
n=N;	/* ustawienie globalnej zmiennej dla wszystkich funkcji pomocniczych */
int   opcja1=1;
int d,i,j,OK=0;

NEWTEXTPAGE;
PRINTF("ALLOCATION\n");
if( WX ){ freetab(WX);
	  WX=NULL;}
if( T  ){ freetab( T); /* zwolnienie starych jesli sa */
	  T=NULL;}
if( (WX =alloctab(n))==NULL ) { OutOfMem(0);return;}
if( (T  =alloctab(n))==NULL ) { OutOfMem(0);return;}
if( (WH =alloctab(n))==NULL ) { goto AERROR1;}
if( (WY =alloctab(n))==NULL ) { goto AERROR2;}
if( (S  =alloctab(n))==NULL ) { goto AERROR3;}
if( (R  =alloctab(n))==NULL ) { goto AERROR4;}
if( (M  =alloctab(n))==NULL ) { goto AERROR5;}
if( (XF =alloctab(n))==NULL ) { goto AERROR6;}
if( (W  =alloctabF(n))==NULL ) { goto AERROR7;}
if( (WSP=alloctabF(n))==NULL ) { goto AERROR8;}
if( (G  =alloctabF(n))==NULL ) { goto AERROR9;}
if( (MG =alloctabF(n))==NULL ) { goto AERROR10;}
if( (F  =alloctabW(n))==NULL ) { goto AERROR11;}
if( (C  =alloctabW(n))==NULL ) { goto AERROR12;}
HTEST;
OK=1;
PRINTF("WAIT !\n");
for( i=1;i<=n;i++)
	{ WX[i]=STD[i-1].met; WY[i]=STD[i-1].kbz;}
ZROB_BAZA_F(F,W);
HTEST;
if( opcja1 ) eps=eps*eps;
epsn=NORMAKW(WY);
HTEST;
 d=0;
 while (
	((opcja1)&&(epsn>0)&&(epsn>=eps)&&(d<wym))
	    ||
	((!opcja1)&&(d<wym))
       )
	{
	DELLINE;
	PRINTF("d=%4d epsn=%7g",d,epsn);
	for(i=1;i<=n;i++ ) MG[d][i]=HORNER(F[d],WX[i]);
	HTEST;
	j=0;
	 do{
	    RAZY(MG[j],ILOCZ_1(d,MG[j],W),M);
	    ODEJMIJ(MG[d],M,R);
	    PRZYPISZ(MG[d],R);
	    HTEST;
	    j++;
	    }while(j<=(d-1));
	pom=1/sqrt(NORMAKW(MG[d]));
	RAZY(MG[d],pom,M);
	PRZYPISZ(MG[d],M);
	RAZY(MG[d],ILOCZ_2(WY,MG[d]),M);
	DODAJ(WH,M,S);
	HTEST;
	epsn=epsn-sqr(ILOCZ_2(WY,MG[d]));

    if( opcja1 )
	{
	if( epsn>0 )
		{
		 PRZYPISZ(WH,S);
		 d=d+1;
		 HTEST;
		 }
	}
	else
	{
	eps=fabs(epsn);
	PRINTF(" blad:%g",eps);
	PRZYPISZ(WH,S);
	d=d+1;
	HTEST;
	}
      }
HTEST;
PRINTF("\nDEALLOCATION\n");
		freetabW(C,n);HTEST;
AERROR12:	freetabW(F,n);HTEST;
AERROR11:	freetabF(MG,n);HTEST;
AERROR10:	freetabF(G,n);HTEST;
AERROR9:	freetabF(WSP,n);HTEST;
AERROR8:	freetabF(W,n);HTEST;
AERROR7:	freetab(XF);  HTEST;
AERROR6:	freetab(M);   HTEST;
AERROR5:	freetab(R);   HTEST;
AERROR4:	freetab(S);   HTEST;
AERROR3:	freetab(WY);  HTEST;
AERROR2:
if(OK) WSPOLCZ(T,WH);
freetab(WH);                  HTEST;
AERROR1:
if(!OK) OutOfMem(0);
PAUSE;
}


float GramApproxymation(float  X)
{
double  y=GramSmitApproxymation(X);
y*=y;
if( y<MAXFLOAT )
	return y;
      else
	return MAXFLOAT;
}

float GramLnApproxymation(float  X)
{
long double  y=GramSmitApproxymation(X);
if(y<MIN_PAR_EXP) return 0.0;
if( y<ln_MAXFLOAT )
	return exp( y );
	else
	return MAXFLOAT;
}

float GramLog10Approxymation(float X)
{
long double  y=GramSmitApproxymation(X);
y*=ln10;
if(y<MIN_PAR_EXP) return 0.0;/* Wartosc wywracajaca Exp */
if( y<ln_MAXFLOAT )
	return exp( y );
	else
	return MAXFLOAT;
}

void GramGenApprox(band* STD,int N)
{
int i;
for(i=0;i<N;i++) STD[i].kbz=sqrt( STD[i].kbz );
GramSmitGenApprox(STD , N);
}

void GramLnGenApprox(band* STD,int N)
{
int i;
for(i=0;i<N;i++) STD[i].kbz=log( STD[i].kbz );
GramSmitGenApprox(STD , N);
}

void GramLog10GenApprox(band* STD,int N)
{
int i;
for(i=0;i<N;i++) STD[i].kbz=log10( STD[i].kbz );
GramSmitGenApprox( STD , N);
}

void ManualGenApprox(band*,int ); /* Importowana z modulu MAKEAPPR */

/* Gospodarka funkcjami Approxymacji */

void  (*genApproxymation)(band* STD,int n)=HiperGenApprox;
float (*Approxymation)(float X)=HiperApproxymation;
AppEnum AppType=HippType;
void SwitchApproxymation()
{
switch( AppType )
  {
  case NullType:
genApproxymation= DummyGenApprox;
Approxymation= NullApproxymation;break;
  case HippType:
genApproxymation= HiperGenApprox;
Approxymation= HiperApproxymation;break;
  case StandType:
genApproxymation= StandartGenApprox;
Approxymation= StandartApproxymation;break;
  case PolyType:
genApproxymation= GramGenApprox;
Approxymation= GramApproxymation;break;
  case PoLnType:
genApproxymation= GramLnGenApprox;
Approxymation= GramLnApproxymation;break;
  case PoLogType:
genApproxymation= GramLog10GenApprox;
Approxymation= GramLog10Approxymation;break;
  case ManuType:
genApproxymation= ManualGenApprox;
Approxymation= HiperApproxymation;break;
  case ErrorType:
	 default:
	 {
	 fprintf(stderr,"\7Sorry !!! INTERNAL ERROR !");
	 exit(5);
	 }
  }
}

